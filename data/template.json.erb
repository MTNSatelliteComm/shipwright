{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Ship-in-a-bottle: an AWS model of a Nexus Ship Cloud",
    "Parameters": {
        "KeyName": {
            "Type": "String",
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the web server"
        },
        "InstanceType": {
            "Description": "Application Server EC2 instance type",
            "Type": "String",
            "AllowedValues": ["t1.micro", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "c1.medium", "c1.xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge"],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "ShipName": {
            "Description": "Test ship name",
            "Type": "String",
            "ConstraintDescription": "Must be a valid ship name from AWS fleet."
        },
        "ChefOrganization": {
            "Description": "The Organization name used in Hosted Chef.",
            "Type": "String",
            "Default": "mtn-pipelines"
        },
        "ChefClientRetries": {
            "Description": "How many times to retry chef client run before giving up.",
            "Type": "Number",
            "Default": "3",
            "MinValue" : "1"
        },
        "Validator": {
            "Description": "validation client name.",
            "Type": "String",
            "Default": "mtn-pipelines-validator"
        },
        "ChefEnvironment": {
            "Description": "The Chef Environment.",
            "Type": "String",
            "Default": "prod"
        },
        "DomainName": {
            "Description": "Server Domain Name.",
            "Type": "String",
            "Default": "mtnsatcloud.com"
        },
        "S3ChefBucket": {
            "Description": "S3 bucket containing validation private key for Chef Server",
            "Type": "String"
        },
        "Infra1PublicIp": {
            "Description": "Allocation id of an AWS Elastic IP to be used as the public ip of infra1 sled",
            "Type": "String"
        }
    },
    "Mappings": {
        "AWSInstanceType2Arch": {
            "t1.micro": {
                "Arch": "64"
            },
            "m1.small": {
                "Arch": "64"
            },
            "m1.medium": {
                "Arch": "64"
            },
            "m1.large": {
                "Arch": "64"
            },
            "m1.xlarge": {
                "Arch": "64"
            },
            "m2.xlarge": {
                "Arch": "64"
            },
            "m2.2xlarge": {
                "Arch": "64"
            },
            "m2.4xlarge": {
                "Arch": "64"
            },
            "c1.medium": {
                "Arch": "64"
            },
            "c1.xlarge": {
                "Arch": "64"
            }
        },
        "AWSRegionArch2AMI" : {
            "us-east-1"      : { "32" : "ami-359c9f5c", "64" : "ami-0b9c9f62" },
            "us-west-2"      : { "32" : "ami-c6bed2f6", "64" : "ami-c8bed2f8" },
            "us-west-1"      : { "32" : "ami-769ba733", "64" : "ami-709ba735" },                                
            "eu-west-1"      : { "32" : "ami-55e91b22", "64" : "ami-51e91b26" },
            "ap-southeast-1" : { "32" : "ami-647d2c36", "64" : "ami-51821b6b" },
            "ap-southeast-2" : { "32" : "ami-53821b69", "64" : "ami-51821b6b" },
            "ap-northeast-1" : { "32" : "ami-43255342", "64" : "ami-45255344" },
            "sa-east-1"      : { "32" : "ami-739c3f6e", "64" : "ami-6d9c3f70" }
        }, 
        "AWSRegionArch2StackatoAMI" : {
            "us-east-1"      : { "64" : "ami-897403e0" }
        }, 
        "SubnetConfig" : {
            "VPC"     : { "CIDR" : "172.16.0.0/16" },
            "Public"  : { "CIDR" : "172.16.31.0/24" },
            "Private" : { "CIDR" : "172.16.30.0/24" }
        }
    },
    "Resources": {
        "VPC" : {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
                "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ]},
                "EnableDnsHostnames" : "true",
                "Tags" : [
                    { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
                    { "Key" : "Network", "Value" : "Public" },
                    { "Key" : "Name", "Value" :  { "Fn::Join" : [ ":", [ { "Ref" : "AWS::StackName" }, "VPC" ] ] } }
                ]
            }
        },
        "PublicSubnet" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
                "Tags" : [
                  { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
                  { "Key" : "Network", "Value" : "Public" },
                  { "Key" : "Name", "Value" :  { "Fn::Join" : [ ":", [ { "Ref" : "AWS::StackName" }, "PublicSubnet" ] ] } }
                ]
            }
        },
        "InternetGateway" : {
            "Type" : "AWS::EC2::InternetGateway",
            "Properties" : {
                "Tags" : [
                    { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
                    { "Key" : "Network", "Value" : "Public" },
                    { "Key" : "Name", "Value" :  { "Fn::Join" : [ ":", [ { "Ref" : "AWS::StackName" }, "InternetGateway" ] ] } }
                ]
            }
        },
        "GatewayToInternet" : {
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "InternetGatewayId" : { "Ref" : "InternetGateway" }
            }
        },
        "PublicRouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "Tags" : [
                    { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
                    { "Key" : "Network", "Value" : "Public" },
                    { "Key" : "Name", "Value" :  { "Fn::Join" : [ ":", [ { "Ref" : "AWS::StackName" }, "PublicRouteTable" ] ] } }
                ]
            }
        },
        "PublicRoute" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : "GatewayToInternet",
            "Properties" : {
                "RouteTableId" : { "Ref" : "PublicRouteTable" },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "GatewayId" : { "Ref" : "InternetGateway" }
            }
        },
        "PublicSubnetRouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PublicSubnet" },
                "RouteTableId" : { "Ref" : "PublicRouteTable" }
            }
        },
        "PrivateSubnet" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Private", "CIDR" ]},
                "Tags" : [
                    { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
                    { "Key" : "Network", "Value" : "Private" },
                    { "Key" : "Name", "Value" :  { "Fn::Join" : [ ":", [ { "Ref" : "AWS::StackName" }, "PrivateSubnet" ] ] } }
                ]
            }
        },
        "PrivateRouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
                "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "Tags" : [
                    { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
                    { "Key" : "Network", "Value" : "Private" },
                    { "Key" : "Name", "Value" :  { "Fn::Join" : [ ":", [ { "Ref" : "AWS::StackName" }, "PrivateRouteTable" ] ] } }
                ]
            }
        },
        "PrivateSubnetRouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PrivateSubnet" },
                "RouteTableId" : { "Ref" : "PrivateRouteTable" }
            }
        },
        "PrivateRoute" : {
            "Type" : "AWS::EC2::Route",
            "Properties" : {
                "RouteTableId" : { "Ref" : "PrivateRouteTable" },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "InstanceId" : { "Ref" : "Infra1" }
            }
        },
        "ChefClientUser": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": ["cloudformation:DescribeStackResource", "s3:Get"],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "HostKeys": {
            "Type": "AWS::IAM::AccessKey",
            "DependsOn": "ChefClientUser",
            "Properties": {
                "UserName": {
                    "Ref": "ChefClientUser"
                }
            }
        },
        "BucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "DependsOn": "HostKeys",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2008-10-17",
                    "Id": "ReadPolicy",
                    "Statement": [
                        {
                            "Sid": "ReadAccess",
                            "Action": ["s3:GetObject", "s3:PutObject"],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": ["",
                                    ["arn:aws:s3:::", {
                                            "Ref": "S3ChefBucket"
                                        }, "/*"
                                    ]
                                ]
                            },
                            "Principal": {
                                "AWS": {
                                    "Fn::GetAtt": ["ChefClientUser", "Arn"]
                                }
                            }
                        }
                    ]
                },
                "Bucket": {
                    "Ref": "S3ChefBucket"
                }
            }
        },
        "SerfSetupWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "SerfSetupWaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "Infra1",
            "Properties": {
                "Handle": {
                    "Ref": "SerfSetupWaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "StackFinishedWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "StackFinishedWaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "Infra1",
            "Properties": {
                "Handle": {
                    "Ref": "StackFinishedWaitHandle"
                },
                "Count": "7",
                "Timeout": "3600"
            }
        },
        "Infra1SecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Enable internal access to the NAT device",
                "VpcId" : { "Ref" : "VPC" },
                "SecurityGroupIngress" : [
                    { "IpProtocol" : "tcp",  "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : "0.0.0.0/0"} ,
                    { "IpProtocol" : "tcp",  "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0"} ,
                    { "IpProtocol" : "tcp",  "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : "0.0.0.0/0"} ,
                    { "IpProtocol" : "tcp",  "FromPort" : "5672",  "ToPort" : "5672",  "CidrIp" : "0.0.0.0/0"} ,
                    { "IpProtocol" : "tcp",  "FromPort" : "5671",  "ToPort" : "5671",  "CidrIp" : "0.0.0.0/0"} ,
                    { "IpProtocol" : "tcp",  "FromPort" : "2055",  "ToPort" : "2055",  "CidrIp" : "0.0.0.0/0"} ,
                    { "IpProtocol" : "tcp",  "FromPort" : "9418",  "ToPort" : "9418",  "CidrIp" : "0.0.0.0/0"} ,
                    { "IpProtocol" : "tcp",  "FromPort" : "15672",  "ToPort" : "15672",  "CidrIp" : "0.0.0.0/0"} ,
                    { "IpProtocol" : "tcp",  "FromPort" : "55672",  "ToPort" : "55672",  "CidrIp" : "0.0.0.0/0"} ,
                    { "IpProtocol" : "tcp",  "FromPort" : "16672",  "ToPort" : "16672",  "CidrIp" : "0.0.0.0/0"} ,
                    { "IpProtocol" : "tcp",  "FromPort" : "3030",  "ToPort" : "3030",  "CidrIp" : "0.0.0.0/0"} ,
                    { "IpProtocol" : "tcp",  "FromPort" : "3030",  "ToPort" : "3030",  "CidrIp" : "0.0.0.0/0"} ,
                    { "IpProtocol" : "udp",  "FromPort" : "7946",  "ToPort" : "7946",  "CidrIp" : "0.0.0.0/0"} ,
                    { "IpProtocol" : "tcp",  "FromPort" : "7946",  "ToPort" : "7946",  "CidrIp" : "0.0.0.0/0"} ,
                    { "IpProtocol" : "icmp", "FromPort" : "8",   "ToPort" : "-1",  "CidrIp" : "0.0.0.0/0"} 
                ]
            }
        },
        "NonInfraSledSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Allow access from infra1 as well as outbound HTTP and HTTPS traffic",
                "VpcId" : { "Ref" : "VPC" },
                "SecurityGroupIngress" : [
                    { "IpProtocol" : "tcp",  "FromPort" : "80",  "ToPort" : "80",  "SourceSecurityGroupId" : { "Ref" : "Infra1SecurityGroup" } } ,
                    { "IpProtocol" : "tcp",  "FromPort" : "22",  "ToPort" : "22",  "SourceSecurityGroupId" : { "Ref" : "Infra1SecurityGroup" } } ,
                    { "IpProtocol" : "tcp",  "FromPort" : "443", "ToPort" : "443", "SourceSecurityGroupId" : { "Ref" : "Infra1SecurityGroup" } } , 
                    { "IpProtocol" : "tcp",  "FromPort" : "5672", "ToPort" : "5672", "SourceSecurityGroupId" : { "Ref" : "Infra1SecurityGroup" } } , 
                    { "IpProtocol" : "tcp",  "FromPort" : "5671", "ToPort" : "5671", "SourceSecurityGroupId" : { "Ref" : "Infra1SecurityGroup" } } ,
                    { "IpProtocol" : "tcp",  "FromPort" : "2055", "ToPort" : "2055", "SourceSecurityGroupId" : { "Ref" : "Infra1SecurityGroup" } } , 
                    { "IpProtocol" : "tcp",  "FromPort" : "9418", "ToPort" : "9418", "SourceSecurityGroupId" : { "Ref" : "Infra1SecurityGroup" } } , 
                    { "IpProtocol" : "tcp",  "FromPort" : "15672", "ToPort" : "15672", "SourceSecurityGroupId" : { "Ref" : "Infra1SecurityGroup" } } , 
                    { "IpProtocol" : "tcp",  "FromPort" : "55672", "ToPort" : "55672", "SourceSecurityGroupId" : { "Ref" : "Infra1SecurityGroup" } } , 
                    { "IpProtocol" : "tcp",  "FromPort" : "16672", "ToPort" : "16672", "SourceSecurityGroupId" : { "Ref" : "Infra1SecurityGroup" } } , 
                    { "IpProtocol" : "tcp",  "FromPort" : "3030", "ToPort" : "3030", "SourceSecurityGroupId" : { "Ref" : "Infra1SecurityGroup" } } , 
                    { "IpProtocol" : "tcp",  "FromPort" : "3030", "ToPort" : "3030", "SourceSecurityGroupId" : { "Ref" : "Infra1SecurityGroup" } } , 
                    { "IpProtocol" : "udp",  "FromPort" : "7946", "ToPort" : "7946", "SourceSecurityGroupId" : { "Ref" : "Infra1SecurityGroup" } } ,
                    { "IpProtocol" : "tcp",  "FromPort" : "7946", "ToPort" : "7946", "SourceSecurityGroupId" : { "Ref" : "Infra1SecurityGroup" } } , 
                    { "IpProtocol" : "icmp", "FromPort" : "8",   "ToPort" : "-1",  "SourceSecurityGroupId" : { "Ref" : "Infra1SecurityGroup" } }
                ]
            }
        },
        "Eth0" : {
            "Type" : "AWS::EC2::NetworkInterface",
            "Properties" : {
                "Description" : "Infra1 eth0 network interface",
                "GroupSet" : [ { "Ref" : "Infra1SecurityGroup" } ],
                "PrivateIpAddresses" : [
                    { "PrivateIpAddress" : "172.16.31.6", "Primary" : "true" },
                    { "PrivateIpAddress" : "172.16.31.5", "Primary" : "false" }
                ],
                "SourceDestCheck" : "false",
                "SubnetId" : { "Ref" : "PublicSubnet" },
                "Tags" : [ 
                    {
                        "Key" : "Name", 
                        "Value" : { "Fn::Join" : [ ":", [ { "Ref" : "AWS::StackName" }, "Interface 0" ] ] }
                    }, 
                    {
                        "Key" : "Interface", 
                        "Value" : "eth0"
                    } 
                ]
            }
        },
        "Infra1EIPAssociation" : {
            "Type": "AWS::EC2::EIPAssociation",
            "Properties": {
                "AllocationId": { "Ref" : "Infra1PublicIp" },
                "InstanceId" : { "Ref" : "Infra1" }
            }
        },
        "Infra1" : {
            "Type" : "AWS::EC2::Instance",
            "Metadata" : { 
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/home/ubuntu/.s3cfg": {
                                "content": {
                                    "Fn::Join": ["",
                                        ["[default]\n", "access_key = ", {
                                                "Ref": "HostKeys"
                                            }, "\n", "secret_key = ", {
                                                "Fn::GetAtt": ["HostKeys", "SecretAccessKey"]
                                            }, "\n", "use_https = True\n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "ubuntu",
                                "group": "ubuntu"
                            },
                            "/etc/chef/first-boot.json": {
                                "content": {
                                    "Fn::Join": ["",
                                        [
                                            "{ \"run_list\": [ \"recipe[chef_handler::rabbit]\", \"recipe[ship::", { "Ref": "ShipName" }, "]\", \"recipe[mtn_roles::aws-sled1]\" ] }"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "InstanceType" : { "Ref" : "InstanceType" },
                "KeyName" : { "Ref" : "KeyName" },
                "NetworkInterfaces" : [ { "NetworkInterfaceId" : {"Ref" : "Eth0"}, "DeviceIndex" : "0" } ],
                "ImageId": {
                    "Fn::FindInMap": ["AWSRegionArch2AMI", {
                            "Ref": "AWS::Region"
                        }, {
                            "Fn::FindInMap": ["AWSInstanceType2Arch", {
                                    "Ref": "InstanceType"
                                }, "Arch"
                            ]
                        }
                    ]
                },
                "UserData" : {
                    "Fn::Base64": {
                        "Fn::Join": ["",
                            [
                                "#!/bin/bash -v\n", 
                                "function error_exit\n", 
                                "{\n",
                                "\n", "  cfn-signal -e 1 -r \"$1\" '", { "Ref": "StackFinishedWaitHandle" }, 
                                "'\n", 
                                "  exit 1\n", 
                                "}\n", 
                                "sudo apt-get update\n", 
                                "sudo apt-get -y --force-yes install s3cmd\n",
                                "sudo apt-get -y --force-yes install ssl-cert\n",
                                "sudo apt-get -y --force-yes install wget\n",
                                "sudo apt-get -y --force-yes install unzip\n",
                                "sudo echo -e \"\n    address 172.16.31.5\n    netmask 255.255.255.0\n    gateway 172.16.31.1\n    up ip addr add 172.16.31.6/24 dev eth0\" >> /etc/network/interfaces.d/eth0.cfg\n",
                                "sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\n",
                                "sudo sysctl -w net.ipv4.ip_forward=1\n",
                                "sudo /etc/init.d/networking restart\n",
                                "curl -L https://www.opscode.com/chef/install.sh | sudo bash -s -- -v 11.10.4\n",
                                "sudo apt-get -y --force-yes install python-setuptools\n",
                                "sudo easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-1.0-6.tar.gz\n", 
                                "sudo cfn-init -v ", 
                                "         -s ", { "Ref": "AWS::StackName" }, 
                                "         -r Infra1 ", 
                                "         --access-key ", { "Ref": "HostKeys" }, 
                                "         --secret-key ", { "Fn::GetAtt": ["HostKeys", "SecretAccessKey"] }, 
                                "         --region     ", { "Ref": "AWS::Region" }, 
                                " || error_exit 'Failed to run cfn-init'\n", 
                                "sudo mkdir /var/log/ship_in_a_bottle\n",
                                "sudo s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/chef_init.rb /etc/chef/chef_init.rb >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get Chef initialization script.'\n", 
                                "sudo s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/validation.pem /etc/chef/validation.pem >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get Chef Server validation key'\n",
                                "sudo s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/ec2.json /etc/chef/ohai/hints/ec2.json >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get ohai hint'\n",
                                "sudo chmod 644 /etc/chef/ohai/hints/ec2.json\n",
                                "sudo wget https://dl.bintray.com/mitchellh/serf/0.6.0_linux_amd64.zip || error_exit 'Serf setup (download) failed.'\n",
                                "sudo unzip 0.6.0_linux_amd64.zip || error_exit 'Serf setup (unzip) failed.'\n",
                                "sudo mv serf /usr/bin || error_exit 'Serf setup (move) failed.'\n",
                                "sudo s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/serf_infra1.json /etc/serf/serf.json >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get serf json'\n",
                                "sudo chmod 644 /etc/serf/serf.json\n",
                                "sudo s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/serf.conf /etc/init/serf.conf >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get serf startup script'\n",
                                "sudo initctl reload-configuration; sudo start serf || error_exit 'Serf start failed.'\n",
                                "cfn-signal -e 0 -r 'Serf setup finished' '", { "Ref": "SerfSetupWaitHandle" }, "'\n",
                                "sudo /opt/chef/embedded/bin/ruby /etc/chef/chef_init.rb", " -b ", { "Ref": "S3ChefBucket" }, " -c \"https://private-chef.mtnsatcloud.com\" -d ", { "Ref": "DomainName" }, " -e ", { "Ref": "ChefEnvironment" }, " -o ", { "Ref": "ChefOrganization" }, " -r ", { "Ref": "ChefClientRetries" }, " -s ", { "Ref": "ShipName" }, " -v ", { "Ref": "Validator" }, " -u -l infra1 >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to run chef_init script.'\n",
                                "sleep 60\n", 
                                "JOBURL=http://jenkins-ci.mtnsatcloud.com/job/promote-to-ship\n",
                                "JSONURL=${JOBURL}/lastBuild/api/json\n",
                                "curl --data \"SHIPNAME=", { "Ref": "ShipName" }, "&PROMOTEFROM=", { "Ref": "ChefEnvironment" }, "\" ${JOBURL}/buildWithParameters || error_exit 'Failed to run start promote job.'\n",
                                "sleep 10\n",
                                "GREP_RETURN_CODE=0\n",
                                "while [ $GREP_RETURN_CODE -eq 0 ]\n",
                                "do\n",
                                "    sleep 3\n",
                                "    curl ${JSONURL} | grep \\\"result\\\":null\n",
                                "    GREP_RETURN_CODE=$?\n",
                                "done\n",
                                "curl ${JSONURL} | grep \\\"result\\\":\\\"SUCCESS\\\" || error_exit 'Promote job failed.'\n",
                                "serf event chef_on_ship"
                            ]
                        ]
                    }
                },
                "Tags" : [ 
                    { 
                        "Key" : "Name", 
                        "Value" : { 
                            "Fn::Join" : [ ":", [ { "Ref" : "AWS::StackName" }, "Infra1" ] ] 
                        } 
                    } 
                ]
            }
        },
        "Sled2" : {
            "Type" : "AWS::EC2::Instance",
            "DependsOn" : "SerfSetupWaitCondition",
            "Metadata" : { 
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/home/ubuntu/.s3cfg": {
                                "content": {
                                    "Fn::Join": ["",
                                        ["[default]\n", "access_key = ", {
                                                "Ref": "HostKeys"
                                            }, "\n", "secret_key = ", {
                                                "Fn::GetAtt": ["HostKeys", "SecretAccessKey"]
                                            }, "\n", "use_https = True\n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "ubuntu",
                                "group": "ubuntu"
                            },
                            "/etc/chef/first-boot.json": {
                                "content": {
                                    "Fn::Join": ["",
                                        [
                                            "{ \"run_list\": [ \"recipe[chef_handler::rabbit]\", \"recipe[ship::", { "Ref": "ShipName" }, "]\", \"recipe[mtn_roles::sled2]\" ] }"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/chef/chef_on_ship_handler.sh": {
                                "content": {
                                    "Fn::Join": ["",
                                        [
                                            "#!/bin/bash -v\n",
                                            "s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/", { "Ref": "ShipName" }, "-infra1.", { "Ref": "DomainName" }, "-validator.pem  /etc/chef/validation.pem >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || cfn-signal -e 1 -r 'Failed to download peasplitter validator.' '", { "Ref": "StackFinishedWaitHandle" }, "'\n",
                                            "/opt/chef/embedded/bin/ruby /etc/chef/chef_init.rb -c \"https://172.16.31.6\" -d ", { "Ref": "DomainName" }, " -e shipcloud", " -r ", { "Ref": "ChefClientRetries" }, " -o peasplitter -s ", { "Ref": "ShipName" }, " -l sled2 >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || cfn-signal -e 1 -r 'Failed to run chef_init script.' '", { "Ref": "StackFinishedWaitHandle" }, "'\n", 
                                            "cfn-signal -e 0 -r 'Chef Client configuration' '", { "Ref": "StackFinishedWaitHandle" }, "'"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "InstanceType" : { "Ref" : "InstanceType" },
                "UserData" : {
                    "Fn::Base64": {
                        "Fn::Join": ["",
                            [
                                "#!/bin/bash -v\n", 
                                "function error_exit\n", 
                                "{\n",
                                "\n", "  cfn-signal -e 1 -r \"$1\" '", { "Ref": "StackFinishedWaitHandle" }, 
                                "'\n", 
                                "  exit 1\n", 
                                "}\n",  
                                "sudo apt-get update\n",
                                "sudo apt-get -y --force-yes install s3cmd\n",
                                "sudo apt-get -y --force-yes install ssl-cert\n",
                                "sudo apt-get -y --force-yes install unzip\n",
                                "curl -L https://www.opscode.com/chef/install.sh | sudo bash -s -- -v 11.10.4\n",
                                "sudo apt-get -y --force-yes install python-setuptools\n",
                                "sudo easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-1.0-6.tar.gz\n", 
                                "sudo cfn-init -v ", 
                                "         -s ", { "Ref": "AWS::StackName" }, 
                                "         -r Sled2 ", 
                                "         --access-key ", { "Ref": "HostKeys" }, 
                                "         --secret-key ", { "Fn::GetAtt": ["HostKeys", "SecretAccessKey"] }, 
                                "         --region     ", { "Ref": "AWS::Region" }, 
                                " || error_exit 'Failed to run cfn-init'\n", 
                                "sudo mkdir /var/log/ship_in_a_bottle\n",
                                "sudo s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/chef_init.rb /etc/chef/chef_init.rb >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get Chef initialization script.'\n", 
                                "sudo s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/ec2.json /etc/chef/ohai/hints/ec2.json >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get ohai hint'\n",
                                "sudo chmod 644 /etc/chef/ohai/hints/ec2.json\n",
                                "sudo wget https://dl.bintray.com/mitchellh/serf/0.6.0_linux_amd64.zip || error_exit 'Serf setup (download) failed.'\n",
                                "sudo unzip 0.6.0_linux_amd64.zip || error_exit 'Serf setup (unzip) failed.'\n",
                                "sudo mv serf /usr/bin || error_exit 'Serf setup (move) failed.'\n",
                                "sudo s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/serf_sled2.json /etc/serf/serf.json >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get serf json'\n",
                                "sudo chmod 644 /etc/serf/serf.json\n",
                                "sudo s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/serf.conf /etc/init/serf.conf >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get serf startup script'\n",
                                "sudo initctl reload-configuration; sudo start serf || error_exit 'Serf start failed.'\n"                                
                            ]
                        ]
                    }
                },
                "PrivateIpAddress" : "172.16.30.10",
                "KeyName" : { "Ref" : "KeyName" },
                "SubnetId" : { "Ref" : "PrivateSubnet" },
                "SourceDestCheck" : "false",
                "ImageId": {
                    "Fn::FindInMap": ["AWSRegionArch2AMI", {
                            "Ref": "AWS::Region"
                        }, {
                            "Fn::FindInMap": ["AWSInstanceType2Arch", {
                                    "Ref": "InstanceType"
                                }, "Arch"
                            ]
                        }
                    ]
                },
                "SecurityGroupIds" : [{ "Ref" : "NonInfraSledSecurityGroup" }],
                "Tags" : [ 
                    { 
                        "Key" : "Name", 
                        "Value" : { 
                            "Fn::Join" : [ ":", [ { "Ref" : "AWS::StackName" }, "Sled2" ] ] 
                        } 
                    } 
                ]
            }
        },
        "Sled3" : {
            "Type" : "AWS::EC2::Instance",
            "DependsOn" : "SerfSetupWaitCondition",
            "Metadata" : { 
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/home/stackato/.s3cfg": {
                                "content": {
                                    "Fn::Join": ["",
                                        ["[default]\n", "access_key = ", {
                                                "Ref": "HostKeys"
                                            }, "\n", "secret_key = ", {
                                                "Fn::GetAtt": ["HostKeys", "SecretAccessKey"]
                                            }, "\n", "use_https = True\n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "stackato",
                                "group": "stackato"
                            },
                            "/etc/chef/first-boot.json": {
                                "content": {
                                    "Fn::Join": ["",
                                        [
                                            "{ \"run_list\": [ \"recipe[chef_handler::rabbit]\", \"recipe[ship::", { "Ref": "ShipName" }, "]\", \"recipe[mtn_roles::base]\" ] }"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/chef/chef_on_ship_handler.sh": {
                                "content": {
                                    "Fn::Join": ["",
                                        [
                                            "#!/bin/bash -v\n",
                                            "s3cmd -c /home/stackato/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/", { "Ref": "ShipName" }, "-infra1.", { "Ref": "DomainName" }, "-validator.pem  /etc/chef/validation.pem >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || cfn-signal -e 1 -r 'Failed to download peasplitter validator.' '", { "Ref": "StackFinishedWaitHandle" }, "'\n",
                                            "/opt/chef/embedded/bin/ruby /etc/chef/chef_init.rb -c \"https://172.16.31.6\" -d ", { "Ref": "DomainName" }, " -e shipcloud", " -r ", { "Ref": "ChefClientRetries" }, " -o peasplitter -s ", { "Ref": "ShipName" }, " -l sled3 >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || cfn-signal -e 1 -r 'Failed to run chef_init script.' '", { "Ref": "StackFinishedWaitHandle" }, "'\n", 
                                            "cfn-signal -e 0 -r 'Chef Client configuration' '", { "Ref": "StackFinishedWaitHandle" }, "'"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "InstanceType" : { "Ref" : "InstanceType" },
                "UserData" : {
                    "Fn::Base64": {
                        "Fn::Join": ["",
                            [
                                "#!/bin/bash -v\n", 
                                "function error_exit\n", 
                                "{\n",
                                "\n", "  cfn-signal -e 1 -r \"$1\" '", { "Ref": "StackFinishedWaitHandle" }, 
                                "'\n", 
                                "  exit 1\n", 
                                "}\n",
                                "sudo apt-get update\n",
                                "sudo apt-get -y --force-yes install s3cmd\n",
                                "sudo apt-get -y --force-yes install ssl-cert\n",
                                "sudo apt-get -y --force-yes install unzip\n",
                                "curl -L https://www.opscode.com/chef/install.sh | sudo bash -s -- -v 11.10.4\n",
                                "sudo apt-get -y --force-yes install python-setuptools\n",
                                "sudo easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-1.0-6.tar.gz\n", 
                                "sudo cfn-init -v ", 
                                "         -s ", { "Ref": "AWS::StackName" }, 
                                "         -r Sled3 ", 
                                "         --access-key ", { "Ref": "HostKeys" }, 
                                "         --secret-key ", { "Fn::GetAtt": ["HostKeys", "SecretAccessKey"] }, 
                                "         --region     ", { "Ref": "AWS::Region" }, 
                                " || error_exit 'Failed to run cfn-init'\n", 
                                "sudo mkdir /var/log/ship_in_a_bottle\n",
                                "sudo s3cmd -c /home/stackato/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/chef_init.rb /etc/chef/chef_init.rb >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get Chef initialization script.'\n", 
                                "sudo s3cmd -c /home/stackato/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/ec2.json /etc/chef/ohai/hints/ec2.json >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get ohai hint'\n",
                                "sudo chmod 644 /etc/chef/ohai/hints/ec2.json\n",
                                "sudo wget https://dl.bintray.com/mitchellh/serf/0.6.0_linux_amd64.zip || error_exit 'Serf setup (download) failed.'\n",
                                "sudo unzip 0.6.0_linux_amd64.zip || error_exit 'Serf setup (unzip) failed.'\n",
                                "sudo mv serf /usr/bin || error_exit 'Serf setup (move) failed.'\n",
                                "sudo s3cmd -c /home/stackato/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/serf_sled3.json /etc/serf/serf.json >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get serf json'\n",
                                "sudo chmod 644 /etc/serf/serf.json\n",
                                "sudo s3cmd -c /home/stackato/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/serf.conf /etc/init/serf.conf >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get serf startup script'\n",
                                "sudo initctl reload-configuration; sudo start serf || error_exit 'Serf start failed.'\n"
                                
                            ]
                        ]
                    }
                },
                "PrivateIpAddress" : "172.16.30.11",
                "KeyName" : { "Ref" : "KeyName" },
                "SubnetId" : { "Ref" : "PrivateSubnet" },
                "SourceDestCheck" : "false",
                "ImageId": {
                    "Fn::FindInMap": ["AWSRegionArch2StackatoAMI", {
                            "Ref": "AWS::Region"
                        }, {
                            "Fn::FindInMap": ["AWSInstanceType2Arch", {
                                    "Ref": "InstanceType"
                                }, "Arch"
                            ]
                        }
                    ]
                },
                "SecurityGroupIds" : [{ "Ref" : "NonInfraSledSecurityGroup" }],
                "Tags" : [ 
                    { 
                        "Key" : "Name", 
                        "Value" : { 
                            "Fn::Join" : [ ":", [ { "Ref" : "AWS::StackName" }, "Sled3" ] ] 
                        } 
                    } 
                ]
            }
        },
        "Sled4" : {
            "Type" : "AWS::EC2::Instance",
            "DependsOn" : "SerfSetupWaitCondition",
            "Metadata" : { 
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/home/ubuntu/.s3cfg": {
                                "content": {
                                    "Fn::Join": ["",
                                        ["[default]\n", "access_key = ", {
                                                "Ref": "HostKeys"
                                            }, "\n", "secret_key = ", {
                                                "Fn::GetAtt": ["HostKeys", "SecretAccessKey"]
                                            }, "\n", "use_https = True\n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "ubuntu",
                                "group": "ubuntu"
                            },
                            "/etc/chef/first-boot.json": {
                                "content": {
                                    "Fn::Join": ["",
                                        [
                                            "{ \"run_list\": [ \"recipe[chef_handler::rabbit]\", \"recipe[ship::", { "Ref": "ShipName" }, "]\", \"recipe[mtn_roles::sled4]\" ] }"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/chef/chef_on_ship_handler.sh": {
                                "content": {
                                    "Fn::Join": ["",
                                        [
                                            "#!/bin/bash -v\n",
                                            "s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/", { "Ref": "ShipName" }, "-infra1.", { "Ref": "DomainName" }, "-validator.pem  /etc/chef/validation.pem >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || cfn-signal -e 1 -r 'Failed to download peasplitter validator.' '", { "Ref": "StackFinishedWaitHandle" }, "'\n",
                                            "/opt/chef/embedded/bin/ruby /etc/chef/chef_init.rb -c \"https://172.16.31.6\" -d ", { "Ref": "DomainName" }, " -e shipcloud", " -r ", { "Ref": "ChefClientRetries" }, " -o peasplitter -s ", { "Ref": "ShipName" }, " -l sled4 >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || cfn-signal -e 1 -r 'Failed to run chef_init script.' '", { "Ref": "StackFinishedWaitHandle" }, "'\n", 
                                            "cfn-signal -e 0 -r 'Chef Client configuration' '", { "Ref": "StackFinishedWaitHandle" }, "'"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "InstanceType" : { "Ref" : "InstanceType" },
                "UserData" : {
                    "Fn::Base64": {
                        "Fn::Join": ["",
                            [
                                "#!/bin/bash -v\n", 
                                "function error_exit\n", 
                                "{\n",
                                "\n", "  cfn-signal -e 1 -r \"$1\" '", { "Ref": "StackFinishedWaitHandle" }, 
                                "'\n", 
                                "  exit 1\n", 
                                "}\n",
                                "sudo apt-get update\n",
                                "sudo apt-get -y --force-yes install s3cmd\n",
                                "sudo apt-get -y --force-yes install ssl-cert\n",
                                "sudo apt-get -y --force-yes install unzip\n",
                                "curl -L https://www.opscode.com/chef/install.sh | sudo bash -s -- -v 11.10.4\n",
                                "sudo apt-get -y --force-yes install python-setuptools\n",
                                "sudo easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-1.0-6.tar.gz\n", 
                                "sudo cfn-init -v ", 
                                "         -s ", { "Ref": "AWS::StackName" }, 
                                "         -r Sled4 ", 
                                "         --access-key ", { "Ref": "HostKeys" }, 
                                "         --secret-key ", { "Fn::GetAtt": ["HostKeys", "SecretAccessKey"] }, 
                                "         --region     ", { "Ref": "AWS::Region" }, 
                                " || error_exit 'Failed to run cfn-init'\n", 
                                "sudo mkdir /var/log/ship_in_a_bottle\n",
                                "sudo s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/chef_init.rb /etc/chef/chef_init.rb >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get Chef initialization script.'\n", 
                                "sudo s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/ec2.json /etc/chef/ohai/hints/ec2.json >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get ohai hint'\n",
                                "sudo chmod 644 /etc/chef/ohai/hints/ec2.json\n",
                                "sudo wget https://dl.bintray.com/mitchellh/serf/0.6.0_linux_amd64.zip || error_exit 'Serf setup (download) failed.'\n",
                                "sudo unzip 0.6.0_linux_amd64.zip || error_exit 'Serf setup (unzip) failed.'\n",
                                "sudo mv serf /usr/bin || error_exit 'Serf setup (move) failed.'\n",
                                "sudo s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/serf_sled4.json /etc/serf/serf.json >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get serf json'\n",
                                "sudo chmod 644 /etc/serf/serf.json\n",
                                "sudo s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/serf.conf /etc/init/serf.conf >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get serf startup script'\n",
                                "sudo initctl reload-configuration; sudo start serf || error_exit 'Serf start failed.'\n"
                                
                            ]
                        ]
                    }
                },
                "PrivateIpAddress" : "172.16.30.12",
                "KeyName" : { "Ref" : "KeyName" },
                "SubnetId" : { "Ref" : "PrivateSubnet" },
                "SourceDestCheck" : "false",
                "ImageId": {
                    "Fn::FindInMap": ["AWSRegionArch2AMI", {
                            "Ref": "AWS::Region"
                        }, {
                            "Fn::FindInMap": ["AWSInstanceType2Arch", {
                                    "Ref": "InstanceType"
                                }, "Arch"
                            ]
                        }
                    ]
                },
                "SecurityGroupIds" : [{ "Ref" : "NonInfraSledSecurityGroup" }],
                "Tags" : [ 
                    { 
                        "Key" : "Name", 
                        "Value" : { 
                            "Fn::Join" : [ ":", [ { "Ref" : "AWS::StackName" }, "Sled4" ] ] 
                        } 
                    } 
                ]
            }
        },
        "Sled5" : {
            "Type" : "AWS::EC2::Instance",
            "DependsOn" : "SerfSetupWaitCondition",
            "Metadata" : { 
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/home/ubuntu/.s3cfg": {
                                "content": {
                                    "Fn::Join": ["",
                                        ["[default]\n", "access_key = ", {
                                                "Ref": "HostKeys"
                                            }, "\n", "secret_key = ", {
                                                "Fn::GetAtt": ["HostKeys", "SecretAccessKey"]
                                            }, "\n", "use_https = True\n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "ubuntu",
                                "group": "ubuntu"
                            },
                            "/etc/chef/first-boot.json": {
                                "content": {
                                    "Fn::Join": ["",
                                        [
                                            "{ \"run_list\": [ \"recipe[chef_handler::rabbit]\", \"recipe[ship::", { "Ref": "ShipName" }, "]\", \"recipe[mtn_roles::sled5]\" ] }"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/chef/chef_on_ship_handler.sh": {
                                "content": {
                                    "Fn::Join": ["",
                                        [
                                            "#!/bin/bash -v\n",
                                            "s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/", { "Ref": "ShipName" }, "-infra1.", { "Ref": "DomainName" }, "-validator.pem  /etc/chef/validation.pem >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || cfn-signal -e 1 -r 'Failed to download peasplitter validator.' '", { "Ref": "StackFinishedWaitHandle" }, "'\n",
                                            "/opt/chef/embedded/bin/ruby /etc/chef/chef_init.rb -c \"https://172.16.31.6\" -d ", { "Ref": "DomainName" }, " -e shipcloud", " -r ", { "Ref": "ChefClientRetries" }, " -o peasplitter -s ", { "Ref": "ShipName" }, " -l sled5 >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || cfn-signal -e 1 -r 'Failed to run chef_init script.' '", { "Ref": "StackFinishedWaitHandle" }, "'\n", 
                                            "cfn-signal -e 0 -r 'Chef Client configuration' '", { "Ref": "StackFinishedWaitHandle" }, "'"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "InstanceType" : { "Ref" : "InstanceType" },
                "UserData" : {
                    "Fn::Base64": {
                        "Fn::Join": ["",
                            [
                                "#!/bin/bash -v\n", 
                                "function error_exit\n", 
                                "{\n",
                                "\n", "  cfn-signal -e 1 -r \"$1\" '", { "Ref": "StackFinishedWaitHandle" }, 
                                "'\n", 
                                "  exit 1\n", 
                                "}\n", 
                                "sudo apt-get update\n",
                                "sudo apt-get -y --force-yes install s3cmd\n",
                                "sudo apt-get -y --force-yes install ssl-cert\n",
                                "sudo apt-get -y --force-yes install unzip\n",
                                "curl -L https://www.opscode.com/chef/install.sh | sudo bash -s -- -v 11.10.4\n",
                                "sudo apt-get -y --force-yes install python-setuptools\n",
                                "sudo easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-1.0-6.tar.gz\n", 
                                "sudo cfn-init -v ", 
                                "         -s ", { "Ref": "AWS::StackName" }, 
                                "         -r Sled5 ", 
                                "         --access-key ", { "Ref": "HostKeys" }, 
                                "         --secret-key ", { "Fn::GetAtt": ["HostKeys", "SecretAccessKey"] }, 
                                "         --region     ", { "Ref": "AWS::Region" }, 
                                " || error_exit 'Failed to run cfn-init'\n", 
                                "sudo mkdir /var/log/ship_in_a_bottle\n",
                                "sudo s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/chef_init.rb /etc/chef/chef_init.rb >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get Chef initialization script.'\n", 
                                "sudo s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/ec2.json /etc/chef/ohai/hints/ec2.json >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get ohai hint'\n",
                                "sudo chmod 644 /etc/chef/ohai/hints/ec2.json\n",
                                "sudo wget https://dl.bintray.com/mitchellh/serf/0.6.0_linux_amd64.zip || error_exit 'Serf setup (download) failed.'\n",
                                "sudo unzip 0.6.0_linux_amd64.zip || error_exit 'Serf setup (unzip) failed.'\n",
                                "sudo mv serf /usr/bin || error_exit 'Serf setup (move) failed.'\n",
                                "sudo s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/serf_sled5.json /etc/serf/serf.json >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get serf json'\n",
                                "sudo chmod 644 /etc/serf/serf.json\n",
                                "sudo s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/serf.conf /etc/init/serf.conf >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get serf startup script'\n",
                                "sudo initctl reload-configuration; sudo start serf || error_exit 'Serf start failed.'\n"
                                
                            ]
                        ]
                    }
                },
                "PrivateIpAddress" : "172.16.30.13",
                "KeyName" : { "Ref" : "KeyName" },
                "SubnetId" : { "Ref" : "PrivateSubnet" },
                "SourceDestCheck" : "false",
                "ImageId": {
                    "Fn::FindInMap": ["AWSRegionArch2AMI", {
                            "Ref": "AWS::Region"
                        }, {
                            "Fn::FindInMap": ["AWSInstanceType2Arch", {
                                    "Ref": "InstanceType"
                                }, "Arch"
                            ]
                        }
                    ]
                },
                "SecurityGroupIds" : [{ "Ref" : "NonInfraSledSecurityGroup" }],
                "Tags" : [ 
                    { 
                        "Key" : "Name", 
                        "Value" : { 
                            "Fn::Join" : [ ":", [ { "Ref" : "AWS::StackName" }, "Sled5" ] ] 
                        } 
                    } 
                ]
            }
        },
        "Sled6" : {
            "Type" : "AWS::EC2::Instance",
            "DependsOn" : "SerfSetupWaitCondition",
            "Metadata" : { 
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/home/ubuntu/.s3cfg": {
                                "content": {
                                    "Fn::Join": ["",
                                        ["[default]\n", "access_key = ", {
                                                "Ref": "HostKeys"
                                            }, "\n", "secret_key = ", {
                                                "Fn::GetAtt": ["HostKeys", "SecretAccessKey"]
                                            }, "\n", "use_https = True\n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "ubuntu",
                                "group": "ubuntu"
                            },
                            "/etc/chef/first-boot.json": {
                                "content": {
                                    "Fn::Join": ["",
                                        [
                                            "{ \"run_list\": [ \"recipe[chef_handler::rabbit]\", \"recipe[ship::", { "Ref": "ShipName" }, "]\", \"recipe[mtn_roles::sled6]\" ] }"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/chef/chef_on_ship_handler.sh": {
                                "content": {
                                    "Fn::Join": ["",
                                        [
                                            "#!/bin/bash -v\n",
                                            "s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/", { "Ref": "ShipName" }, "-infra1.", { "Ref": "DomainName" }, "-validator.pem  /etc/chef/validation.pem >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || cfn-signal -e 1 -r 'Failed to download peasplitter validator.' '", { "Ref": "StackFinishedWaitHandle" }, "'\n",
                                            "/opt/chef/embedded/bin/ruby /etc/chef/chef_init.rb -c \"https://172.16.31.6\" -d ", { "Ref": "DomainName" }, " -e shipcloud", " -r ", { "Ref": "ChefClientRetries" }, " -o peasplitter -s ", { "Ref": "ShipName" }, " -l sled6 >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || cfn-signal -e 1 -r 'Failed to run chef_init script.' '", { "Ref": "StackFinishedWaitHandle" }, "'\n", 
                                            "cfn-signal -e 0 -r 'Chef Client configuration' '", { "Ref": "StackFinishedWaitHandle" }, "'"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "InstanceType" : { "Ref" : "InstanceType" },
                "UserData" : {
                    "Fn::Base64": {
                        "Fn::Join": ["",
                            [
                                "#!/bin/bash -v\n", 
                                "function error_exit\n", 
                                "{\n",
                                "\n", "  cfn-signal -e 1 -r \"$1\" '", { "Ref": "StackFinishedWaitHandle" }, 
                                "'\n", 
                                "  exit 1\n", 
                                "}\n", 
                                "sudo apt-get update\n",
                                "sudo apt-get -y --force-yes install s3cmd\n",
                                "sudo apt-get -y --force-yes install ssl-cert\n",
                                "sudo apt-get -y --force-yes install unzip\n",
                                "curl -L https://www.opscode.com/chef/install.sh | sudo bash -s -- -v 11.10.4\n",
                                "sudo apt-get -y --force-yes install python-setuptools\n",
                                "sudo easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-1.0-6.tar.gz\n", 
                                "sudo cfn-init -v ", 
                                "         -s ", { "Ref": "AWS::StackName" }, 
                                "         -r Sled6 ", 
                                "         --access-key ", { "Ref": "HostKeys" }, 
                                "         --secret-key ", { "Fn::GetAtt": ["HostKeys", "SecretAccessKey"] }, 
                                "         --region     ", { "Ref": "AWS::Region" }, 
                                " || error_exit 'Failed to run cfn-init'\n",
                                "sudo mkdir /var/log/ship_in_a_bottle\n",
                                "sudo s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/chef_init.rb /etc/chef/chef_init.rb >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get Chef initialization script.'\n", 
                                "sudo s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/ec2.json /etc/chef/ohai/hints/ec2.json >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get ohai hint'\n",
                                "sudo chmod 644 /etc/chef/ohai/hints/ec2.json\n",
                                "sudo wget https://dl.bintray.com/mitchellh/serf/0.6.0_linux_amd64.zip || error_exit 'Serf setup (download) failed.'\n",
                                "sudo unzip 0.6.0_linux_amd64.zip || error_exit 'Serf setup (unzip) failed.'\n",
                                "sudo mv serf /usr/bin || error_exit 'Serf setup (move) failed.'\n",
                                "sudo s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/serf_sled6.json /etc/serf/serf.json >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get serf json'\n",
                                "sudo chmod 644 /etc/serf/serf.json\n",
                                "sudo s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/serf.conf /etc/init/serf.conf >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get serf startup script'\n",
                                "sudo initctl reload-configuration; sudo start serf || error_exit 'Serf start failed.'\n"
                                
                            ]
                        ]
                    }
                },
                "PrivateIpAddress" : "172.16.30.14",
                "KeyName" : { "Ref" : "KeyName" },
                "SubnetId" : { "Ref" : "PrivateSubnet" },
                "SourceDestCheck" : "false",
                "ImageId": {
                    "Fn::FindInMap": ["AWSRegionArch2AMI", {
                            "Ref": "AWS::Region"
                        }, {
                            "Fn::FindInMap": ["AWSInstanceType2Arch", {
                                    "Ref": "InstanceType"
                                }, "Arch"
                            ]
                        }
                    ]
                },
                "SecurityGroupIds" : [{ "Ref" : "NonInfraSledSecurityGroup" }],
                "Tags" : [ 
                    { 
                        "Key" : "Name", 
                        "Value" : { 
                            "Fn::Join" : [ ":", [ { "Ref" : "AWS::StackName" }, "Sled6" ] ] 
                        } 
                    } 
                ]
            }
        },
        "Sled7" : {
            "Type" : "AWS::EC2::Instance",
            "DependsOn" : "SerfSetupWaitCondition",
            "Metadata" : { 
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/home/ubuntu/.s3cfg": {
                                "content": {
                                    "Fn::Join": ["",
                                        ["[default]\n", "access_key = ", {
                                                "Ref": "HostKeys"
                                            }, "\n", "secret_key = ", {
                                                "Fn::GetAtt": ["HostKeys", "SecretAccessKey"]
                                            }, "\n", "use_https = True\n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "ubuntu",
                                "group": "ubuntu"
                            },
                            "/etc/chef/first-boot.json": {
                                "content": {
                                    "Fn::Join": ["",
                                        [
                                            "{ \"run_list\": [ \"recipe[chef_handler::rabbit]\", \"recipe[ship::", { "Ref": "ShipName" }, "]\", \"recipe[mtn_roles::sled7]\" ] }"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/chef/chef_on_ship_handler.sh": {
                                "content": {
                                    "Fn::Join": ["",
                                        [
                                            "#!/bin/bash -v\n",
                                            "s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/", { "Ref": "ShipName" }, "-infra1.", { "Ref": "DomainName" }, "-validator.pem  /etc/chef/validation.pem >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || cfn-signal -e 1 -r 'Failed to download peasplitter validator.' '", { "Ref": "StackFinishedWaitHandle" }, "'\n",
                                            "/opt/chef/embedded/bin/ruby /etc/chef/chef_init.rb -c \"https://172.16.31.6\" -d ", { "Ref": "DomainName" }, " -e shipcloud", " -r ", { "Ref": "ChefClientRetries" }, " -o peasplitter -s ", { "Ref": "ShipName" }, " -l sled7 >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || cfn-signal -e 1 -r 'Failed to run chef_init script.' '", { "Ref": "StackFinishedWaitHandle" }, "'\n", 
                                            "cfn-signal -e 0 -r 'Chef Client configuration' '", { "Ref": "StackFinishedWaitHandle" }, "'"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "InstanceType" : { "Ref" : "InstanceType" },
                "UserData" : {
                    "Fn::Base64": {
                        "Fn::Join": ["",
                            [
                                "#!/bin/bash -v\n", 
                                "function error_exit\n", 
                                "{\n",
                                "\n", "  cfn-signal -e 1 -r \"$1\" '", { "Ref": "StackFinishedWaitHandle" }, 
                                "'\n", 
                                "  exit 1\n", 
                                "}\n", 
                                "sudo apt-get update\n",
                                "sudo apt-get -y --force-yes install s3cmd\n",
                                "sudo apt-get -y --force-yes install ssl-cert\n",
                                "sudo apt-get -y --force-yes install unzip\n",
                                "curl -L https://www.opscode.com/chef/install.sh | sudo bash -s -- -v 11.10.4\n",
                                "sudo apt-get -y --force-yes install python-setuptools\n",
                                "sudo easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-1.0-6.tar.gz\n", 
                                "sudo cfn-init -v ", 
                                "         -s ", { "Ref": "AWS::StackName" }, 
                                "         -r Sled7 ", 
                                "         --access-key ", { "Ref": "HostKeys" }, 
                                "         --secret-key ", { "Fn::GetAtt": ["HostKeys", "SecretAccessKey"] }, 
                                "         --region     ", { "Ref": "AWS::Region" }, 
                                " || error_exit 'Failed to run cfn-init'\n", 
                                "sudo mkdir /var/log/ship_in_a_bottle\n",
                                "sudo s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/chef_init.rb /etc/chef/chef_init.rb >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get Chef initialization script.'\n", 
                                "sudo s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/ec2.json /etc/chef/ohai/hints/ec2.json >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get ohai hint'\n",
                                "sudo chmod 644 /etc/chef/ohai/hints/ec2.json\n",
                                "sudo wget https://dl.bintray.com/mitchellh/serf/0.6.0_linux_amd64.zip || error_exit 'Serf setup (download) failed.'\n",
                                "sudo unzip 0.6.0_linux_amd64.zip || error_exit 'Serf setup (unzip) failed.'\n",
                                "sudo mv serf /usr/bin || error_exit 'Serf setup (move) failed.'\n",
                                "sudo s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/serf_sled7.json /etc/serf/serf.json >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get serf json'\n",
                                "sudo chmod 644 /etc/serf/serf.json\n",
                                "sudo s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/serf.conf /etc/init/serf.conf >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get serf startup script'\n",
                                "sudo initctl reload-configuration; sudo start serf || error_exit 'Serf start failed.'\n"
                                
                            ]
                        ]
                    }
                },
                "PrivateIpAddress" : "172.16.30.15",
                "KeyName" : { "Ref" : "KeyName" },
                "SubnetId" : { "Ref" : "PrivateSubnet" },
                "SourceDestCheck" : "false",
                "ImageId": {
                    "Fn::FindInMap": ["AWSRegionArch2AMI", {
                            "Ref": "AWS::Region"
                        }, {
                            "Fn::FindInMap": ["AWSInstanceType2Arch", {
                                    "Ref": "InstanceType"
                                }, "Arch"
                            ]
                        }
                    ]
                },
                "SecurityGroupIds" : [{ "Ref" : "NonInfraSledSecurityGroup" }],
                "Tags" : [ 
                    { 
                        "Key" : "Name", 
                        "Value" : { 
                            "Fn::Join" : [ ":", [ { "Ref" : "AWS::StackName" }, "Sled7" ] ] 
                        } 
                    } 
                ]
            }
        },
        "Sled8" : {
            "Type" : "AWS::EC2::Instance",
            "DependsOn" : "SerfSetupWaitCondition",
            "Metadata" : { 
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/home/ubuntu/.s3cfg": {
                                "content": {
                                    "Fn::Join": ["",
                                        ["[default]\n", "access_key = ", {
                                                "Ref": "HostKeys"
                                            }, "\n", "secret_key = ", {
                                                "Fn::GetAtt": ["HostKeys", "SecretAccessKey"]
                                            }, "\n", "use_https = True\n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "ubuntu",
                                "group": "ubuntu"
                            },
                            "/etc/chef/first-boot.json": {
                                "content": {
                                    "Fn::Join": ["",
                                        [
                                            "{ \"run_list\": [ \"recipe[chef_handler::rabbit]\", \"recipe[ship::", { "Ref": "ShipName" }, "]\", \"recipe[mtn_roles::sled8]\" ] }"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/chef/chef_on_ship_handler.sh": {
                                "content": {
                                    "Fn::Join": ["",
                                        [
                                            "#!/bin/bash -v\n", 
                                            "s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/", { "Ref": "ShipName" }, "-infra1.", { "Ref": "DomainName" }, "-validator.pem  /etc/chef/validation.pem >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || cfn-signal -e 1 -r 'Failed to download peasplitter validator.' '", { "Ref": "StackFinishedWaitHandle" }, "'\n",
                                            "/opt/chef/embedded/bin/ruby /etc/chef/chef_init.rb -c \"https://172.16.31.6\" -d ", { "Ref": "DomainName" }, " -e shipcloud", " -r ", { "Ref": "ChefClientRetries" }, " -o peasplitter -s ", { "Ref": "ShipName" }, " -l sled8 >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || cfn-signal -e 1 -r 'Failed to run chef_init script.' '", { "Ref": "StackFinishedWaitHandle" }, "'\n", 
                                            "cfn-signal -e 0 -r 'Chef Client configuration' '", { "Ref": "StackFinishedWaitHandle" }, "'"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "InstanceType" : { "Ref" : "InstanceType" },
                "UserData" : {
                    "Fn::Base64": {
                        "Fn::Join": ["",
                            [
                                "#!/bin/bash -v\n", 
                                "function error_exit\n", 
                                "{\n",
                                "\n", "  cfn-signal -e 1 -r \"$1\" '", { "Ref": "StackFinishedWaitHandle" }, 
                                "'\n", 
                                "  exit 1\n", 
                                "}\n",
                                "sudo apt-get update\n",
                                "sudo apt-get -y --force-yes install s3cmd\n",
                                "sudo apt-get -y --force-yes install ssl-cert\n",
                                "sudo apt-get -y --force-yes install unzip\n",
                                "curl -L https://www.opscode.com/chef/install.sh | sudo bash -s -- -v 11.10.4\n",
                                "sudo apt-get -y --force-yes install python-setuptools\n",
                                "sudo easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-1.0-6.tar.gz\n", 
                                "sudo cfn-init -v ", 
                                "         -s ", { "Ref": "AWS::StackName" }, 
                                "         -r Sled8 ", 
                                "         --access-key ", { "Ref": "HostKeys" }, 
                                "         --secret-key ", { "Fn::GetAtt": ["HostKeys", "SecretAccessKey"] }, 
                                "         --region     ", { "Ref": "AWS::Region" }, 
                                " || error_exit 'Failed to run cfn-init'\n", 
                                "sudo mkdir /var/log/ship_in_a_bottle\n",
                                "sudo s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/chef_init.rb /etc/chef/chef_init.rb >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get Chef initialization script.'\n", 
                                "sudo s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/ec2.json /etc/chef/ohai/hints/ec2.json >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get ohai hint'\n",
                                "sudo chmod 644 /etc/chef/ohai/hints/ec2.json\n",
                                "sudo wget https://dl.bintray.com/mitchellh/serf/0.6.0_linux_amd64.zip || error_exit 'Serf setup (download) failed.'\n",
                                "sudo unzip 0.6.0_linux_amd64.zip || error_exit 'Serf setup (unzip) failed.'\n",
                                "sudo mv serf /usr/bin || error_exit 'Serf setup (move) failed.'\n",
                                "sudo s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/serf_sled8.json /etc/serf/serf.json >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get serf json'\n",
                                "sudo chmod 644 /etc/serf/serf.json\n",
                                "sudo s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/serf.conf /etc/init/serf.conf >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed to get serf startup script'\n",
                                "sudo initctl reload-configuration; sudo start serf || error_exit 'Serf start failed.'\n"
                                
                            ]
                        ]
                    }
                },
                "PrivateIpAddress" : "172.16.30.16",
                "KeyName" : { "Ref" : "KeyName" },
                "SubnetId" : { "Ref" : "PrivateSubnet" },
                "SourceDestCheck" : "false",
                "ImageId": {
                    "Fn::FindInMap": ["AWSRegionArch2AMI", {
                            "Ref": "AWS::Region"
                        }, {
                            "Fn::FindInMap": ["AWSInstanceType2Arch", {
                                    "Ref": "InstanceType"
                                }, "Arch"
                            ]
                        }
                    ]
                },
                "SecurityGroupIds" : [{ "Ref" : "NonInfraSledSecurityGroup" }],
                "Tags" : [ 
                    { 
                        "Key" : "Name", 
                        "Value" : { 
                            "Fn::Join" : [ ":", [ { "Ref" : "AWS::StackName" }, "Sled8" ] ] 
                        } 
                    } 
                ]
            }
        }        
    },
    "Outputs" : {
        "InfraDNS" : {
            "Description" : "Public DNS name of the infra1 sled",
            "Value" : { "Fn::GetAtt" : ["Infra1", "PublicDnsName"] }
        }
    }
}