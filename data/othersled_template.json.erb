{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Ship in a Bottle EC2 All other sleds",
    "Parameters": {
        "KeyName": {
            "Type": "String",
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the web server"
        },
        "InstanceType": {
            "Description": "Application Server EC2 instance type",
            "Type": "String",
            "AllowedValues": ["m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge"],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "ShipName": {
            "Description": "Test ship name",
            "Type": "String",
            "ConstraintDescription": "Must be a valid ship name from AWS fleet."
        },
        "ChefOrganization": {
            "Description": "The Organization name used in Hosted Chef.",
            "Type": "String",
            "Default": "mtn-pipelines"
        },
        "ChefClientRetries": {
            "Description": "How many times to retry chef client run before giving up.",
            "Type": "Number",
            "Default": "3",
            "MinValue" : "1"
        },
        "Validator": {
            "Description": "validation client name.",
            "Type": "String",
            "Default": "mtn-pipelines-validator"
        },
        "ChefEnvironment": {
            "Description": "The Chef Environment.",
            "Type": "String",
            "Default": "prod"
        },
        "DomainName": {
            "Description": "Server Domain Name.",
            "Type": "String",
            "Default": "mtnsatcloud.com"
        },
        "S3ChefBucket": {
            "Description": "S3 bucket containing validation private key for Chef Server",
            "Type": "String"
        },
        "HostKeysKey": {
            "Description": "HostKey from IAM host keys",
            "Type": "String"
        },
        "HostKeysSecretAccessKey": {
            "Description": "SecretAccessKey from IAM host keys",
            "Type": "String"
        },
        "PrivateSubnet": {
            "Description": "Id of the private subnet created by networking stack",
            "Type": "String"
        },
        "PrivateSledsSecurityGroup": {
            "Description": "Security group id for sleds 2 through 8",
            "Type": "String"
        },
        "SledName": {
            "Description": "name of sled",
            "AllowedValues": ["sled2", "sled3", "sled4", "sled5", "sled6", "sled7", "sled8"],
            "Type": "String"
        },
        "SerfSetupWaitHandleId" : {
            "Description" : "Id of wait handle signaled when Serf is dones setting up on Sled1",
            "Type": "String"
        },
        "StackFinishedWaitHandleId" : {
            "Description" : "Id of wait handle signaled by each sled upon full sled build completion",
            "Type": "String"
        }
    },
    "Mappings": {
        "AWSInstanceType2Arch": {
            "m3.medium": {
                "Arch": "64"
            },
            "m3.large": {
                "Arch": "64"
            },
            "m3.xlarge": {
                "Arch": "64"
            },
            "m3.2xlarge": {
                "Arch": "64"
            }
        },
        "SledName2Ip": {
            "sled2": {
                "ip": "172.16.30.10"
            },
            "sled3": {
                "ip": "172.16.30.11"
            },
            "sled4": {
                "ip": "172.16.30.12"
            },
            "sled5": {
                "ip": "172.16.30.13"
            },
            "sled6": {
                "ip": "172.16.30.14"
            },
            "sled7": {
                "ip": "172.16.30.15"
            },
            "sled8": {
                "ip": "172.16.30.16"
            }
        },
        "AWSRegionArch2AMI" : {
            "us-east-1"      : { "32" : "ami-359c9f5c", "64" : "ami-0b9c9f62" },
            "us-west-2"      : { "32" : "ami-c6bed2f6", "64" : "ami-c8bed2f8" },
            "us-west-1"      : { "32" : "ami-769ba733", "64" : "ami-709ba735" },                                
            "eu-west-1"      : { "32" : "ami-55e91b22", "64" : "ami-51e91b26" },
            "ap-southeast-1" : { "32" : "ami-647d2c36", "64" : "ami-51821b6b" },
            "ap-southeast-2" : { "32" : "ami-53821b69", "64" : "ami-51821b6b" },
            "ap-northeast-1" : { "32" : "ami-43255342", "64" : "ami-45255344" },
            "sa-east-1"      : { "32" : "ami-739c3f6e", "64" : "ami-6d9c3f70" }
        },
        "AWSRegionArch2StackatoAMI" : {
            "us-east-1"      : { "64" : "ami-897403e0" }
        }
    },
    "Conditions" : {
        "UseStackatoAmi" : { "Fn::Equals" : [{"Ref" : "SledName"}, "sled3"] }
    },
    "Resources": {
        "Sled" : {
            "Type" : "AWS::EC2::Instance",
            "Metadata" : { 
                "AWS::CloudFormation::Authentication" : {
                    "S3AccessCreds" : {
                        "type" : "S3",
                        "buckets": [ { "Ref" : "S3ChefBucket" } ],
                        "accessKeyId" : { "Ref" : "HostKeysKey" },
                        "secretKey" : { "Ref" : "HostKeysSecretAccessKey" }
                    }
                },
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/root/.s3cfg": {
                                "content": {
                                    "Fn::Join": ["",
                                        ["[default]\n", "access_key = ", {
                                                "Ref": "HostKeysKey"
                                            }, "\n", "secret_key = ", {
                                                "Ref": "HostKeysSecretAccessKey"
                                            }, "\n", "use_https = True\n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/chef/first-boot.json": {
                                "content": {
                                    "Fn::Join": ["",
                                        [
                                            "{ \"run_list\": [ \"recipe[chef_handler::rabbit]\", \"recipe[ship::", { "Ref": "ShipName" }, "]\", \"recipe[mtn_roles::", { "Ref": "SledName" }, "]\" ] }"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/init/serf.conf": {
                                "content": {
                                    "Fn::Join": ["",
                                        [
                                            "# Serf Agent (Upstart unit)\n",
                                            "description \"Serf Agent\"\n",
                                            "start on (local-filesystems and net-device-up IFACE!=lo)\n",
                                            "stop on runlevel [06]\n\n",
                                            "env SERF=/usr/bin/serf\n",
                                            "env SERFCONFIG=/etc/serf\n\n",
                                            "setuid root\n",
                                            "setgid root\n\n",
                                            "# Serf emits log messages to stdout, and upstart will write that to\n",
                                            "# /var/log/upstart/serf.log\n",
                                            "exec $SERF agent -config-dir $SERFCONFIG\n\n",
                                            "respawn\n",
                                            "respawn limit 10 10\n",
                                            "kill timeout 10\n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            },
                            "/var/log/ship_in_a_bottle/README": {
                                "content": "All logs from ship in a bottle creation process end up here.",
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/chef/ohai/hints/ec2.json": {
                                "content": {
                                    "Fn::Join": ["",
                                        [
                                            "{}"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/serf/serf.json": {
                                "content": {
                                    "tags": {
                                        "role": {
                                            "Fn::Join": ["",
                                                [
                                                    { "Ref": "SledName" }
                                                ]
                                            ]
                                        }
                                    },
                                    "bind": {
                                        "Fn::Join": [":",
                                            [
                                                {
                                                    "Fn::FindInMap": ["SledName2Ip", {
                                                            "Ref": "SledName"
                                                        }, "ip"
                                                    ]
                                                }, "7946"
                                            ]
                                        ]
                                    },
                                    "start_join": [ "172.16.31.6:7946" ],
                                    "profile": "wan",
                                    "encrypt_key": "eJcSFFUl4Hl4Y2ao1h7ByQ==",
                                    "node_name": {
                                        "Fn::Join": ["",
                                            [
                                                { "Ref": "ShipName" },
                                                "-",
                                                { "Ref": "SledName" }
                                            ]
                                        ]
                                    },
                                    "event_handlers": [ "user:chef_on_ship=/etc/chef/chef_on_ship_handler.sh" ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/chef/chef_init.rb": {
                                "source": {
                                    "Fn::Join" : [
                                        "", [ "https://", { "Ref" : "S3ChefBucket" }, ".s3.amazonaws.com/chef_init.rb" ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/root/chef_11.10.4-1.ubuntu.12.04_amd64.deb" : {
                                "source" : "https://opscode-omnibus-packages.s3.amazonaws.com/ubuntu/12.04/x86_64/chef_11.10.4-1.ubuntu.12.04_amd64.deb",
                                "mode"   : "000664",
                                "owner"  : "root",
                                "group"  : "root"
                            },
                            "/etc/chef/chef_on_ship_handler.sh": {
                                "content": {
                                    "Fn::Join": ["",
                                        [
                                            "#!/bin/bash -v\n",
                                            "function error_exit\n", 
                                            "{\n",
                                            "\n", "  cfn-signal -e 1 -r \"$1\" '", { "Ref": "StackFinishedWaitHandleId" }, 
                                            "'\n", 
                                            "  exit 1\n", 
                                            "}\n", 
                                            "s3cmd -c /root/.s3cfg get s3://", { "Ref": "S3ChefBucket" }, "/", { "Ref": "ShipName" }, "-sled1.", { "Ref": "DomainName" }, "-validator.pem  /etc/chef/validation.pem >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || cfn-signal -e 1 -r 'Failed to download peasplitter validator.' '", { "Ref": "StackFinishedWaitHandleId" }, "'\n",
                                            "/opt/chef/embedded/bin/ruby /etc/chef/chef_init.rb -c \"https://172.16.31.6\" -d ", { "Ref": "DomainName" }, " -e shipcloud", " -r ", { "Ref": "ChefClientRetries" }, " -o peasplitter -s ", { "Ref": "ShipName" }, " -l ", { "Ref": "SledName" }, " >> /var/log/ship_in_a_bottle/chef_init.log 2>&1 || error_exit 'Failed chef client run on ", { "Ref": "SledName" }, "'\n", 
                                            "cfn-signal -e 0 -r 'Chef Client configuration completed' '", { "Ref": "StackFinishedWaitHandleId" }, "'"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "packages": {
                            "apt": {
                                "s3cmd": [],
                                "ssl-cert": []
                            } 
                        }, 
                        "sources": {
                            "/usr/bin" : "https://dl.bintray.com/mitchellh/serf/0.6.0_linux_amd64.zip"
                        },
                        "commands" : {
                            "1-start-serf" : {
                                "command" : "sudo chmod a+x /usr/bin/serf; sudo initctl reload-configuration; sudo start serf",
                                "ignoreErrors" : "false"
                            },
                            "2-install-chef" : {
                                "command" : "sudo dpkg -i /root/chef_11.10.4-1.ubuntu.12.04_amd64.deb",
                                "ignoreErrors" : "false"
                            },
                            "3-install-apt-packages" : {
                                "command" : "sudo apt-get -y --force-yes install s3cmd ssl-cert",
                                "ignoreErrors" : "false"
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "InstanceType" : { "Ref" : "InstanceType" },
                "UserData" : {
                    "Fn::Base64": {
                        "Fn::Join": ["",
                            [
                                "#!/bin/bash -v\n", 
                                "function error_exit\n", 
                                "{\n",
                                "\n", "  cfn-signal -e 1 -r \"$1\" '", { "Ref": "StackFinishedWaitHandleId" }, 
                                "'\n", 
                                "  exit 1\n", 
                                "}\n", 
                                "sudo apt-get update\n",
                                "sudo apt-get -y --force-yes remove apparmor libapparmor1\n",
                                "sudo apt-get -y --force-yes install python-pip\n",
                                "until sudo pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz --timeout=60; do\n",
                                "   echo 'pip error, retrying in 10 seconds...'\n", 
                                "   sleep 10\n",
                                "done\n",
                                "sudo cfn-init -v ", 
                                "         -s ", { "Ref": "AWS::StackName" }, 
                                "         -r Sled ",
                                "         --access-key ", { "Ref": "HostKeysKey" }, 
                                "         --secret-key ", { "Ref": "HostKeysSecretAccessKey" }, 
                                "         --region     ", { "Ref": "AWS::Region" }, 
                                " || error_exit 'Failed to run cfn-init on ", { "Ref": "SledName" }, "'"
                            ]
                        ]
                    }
                },
                "PrivateIpAddress" : {
                    "Fn::FindInMap": ["SledName2Ip", { "Ref": "SledName"}, "ip"]
                },
                "KeyName" : { "Ref" : "KeyName" },
                "SubnetId" : { "Ref" : "PrivateSubnet" },
                "SourceDestCheck" : "false",
                "ImageId": {
                    "Fn::If" : [
                        "UseStackatoAmi",
                        {
                            "Fn::FindInMap": ["AWSRegionArch2StackatoAMI", {
                                "Ref": "AWS::Region"
                                }, {
                                    "Fn::FindInMap": ["AWSInstanceType2Arch", {
                                            "Ref": "InstanceType"
                                        }, "Arch"
                                    ]
                                }
                            ]
                        },
                        {
                            "Fn::FindInMap": ["AWSRegionArch2AMI", {
                                "Ref": "AWS::Region"
                                }, {
                                    "Fn::FindInMap": ["AWSInstanceType2Arch", {
                                            "Ref": "InstanceType"
                                        }, "Arch"
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "SecurityGroupIds" : [{ "Ref" : "PrivateSledsSecurityGroup" }],
                "Tags" : [ 
                    { 
                        "Key" : "Name", 
                        "Value" : { 
                            "Fn::Join" : [ ":", [ { "Ref" : "AWS::StackName" }, { "Ref" : "SledName" } ] ] 
                        } 
                    } 
                ]
            }
        }
    }
}